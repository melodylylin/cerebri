/* This file was automatically generated by CasADi 3.6.5.
 *  It consists of:
 *   1) content generated by CasADi runtime: not copyrighted
 *   2) template code copied from CasADi source: permissively licensed (MIT-0)
 *   3) user code: owned by the user
 *
 */
#ifdef __cplusplus
extern "C" {
#endif

#ifndef casadi_real
#define casadi_real double
#endif

#ifndef casadi_int
#define casadi_int long long int
#endif

int bezier7_solve(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem);
int bezier7_solve_alloc_mem(void);
int bezier7_solve_init_mem(int mem);
void bezier7_solve_free_mem(int mem);
int bezier7_solve_checkout(void);
void bezier7_solve_release(int mem);
void bezier7_solve_incref(void);
void bezier7_solve_decref(void);
casadi_int bezier7_solve_n_in(void);
casadi_int bezier7_solve_n_out(void);
casadi_real bezier7_solve_default_in(casadi_int i);
const char* bezier7_solve_name_in(casadi_int i);
const char* bezier7_solve_name_out(casadi_int i);
const casadi_int* bezier7_solve_sparsity_in(casadi_int i);
const casadi_int* bezier7_solve_sparsity_out(casadi_int i);
int bezier7_solve_work(casadi_int* sz_arg, casadi_int* sz_res, casadi_int* sz_iw, casadi_int* sz_w);
int bezier7_solve_work_bytes(casadi_int* sz_arg, casadi_int* sz_res, casadi_int* sz_iw, casadi_int* sz_w);
#define bezier7_solve_SZ_ARG 3
#define bezier7_solve_SZ_RES 1
#define bezier7_solve_SZ_IW 0
#define bezier7_solve_SZ_W 40
int bezier7_traj(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem);
int bezier7_traj_alloc_mem(void);
int bezier7_traj_init_mem(int mem);
void bezier7_traj_free_mem(int mem);
int bezier7_traj_checkout(void);
void bezier7_traj_release(int mem);
void bezier7_traj_incref(void);
void bezier7_traj_decref(void);
casadi_int bezier7_traj_n_in(void);
casadi_int bezier7_traj_n_out(void);
casadi_real bezier7_traj_default_in(casadi_int i);
const char* bezier7_traj_name_in(casadi_int i);
const char* bezier7_traj_name_out(casadi_int i);
const casadi_int* bezier7_traj_sparsity_in(casadi_int i);
const casadi_int* bezier7_traj_sparsity_out(casadi_int i);
int bezier7_traj_work(casadi_int* sz_arg, casadi_int* sz_res, casadi_int* sz_iw, casadi_int* sz_w);
int bezier7_traj_work_bytes(casadi_int* sz_arg, casadi_int* sz_res, casadi_int* sz_iw, casadi_int* sz_w);
#define bezier7_traj_SZ_ARG 3
#define bezier7_traj_SZ_RES 1
#define bezier7_traj_SZ_IW 0
#define bezier7_traj_SZ_W 20
int bezier3_solve(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem);
int bezier3_solve_alloc_mem(void);
int bezier3_solve_init_mem(int mem);
void bezier3_solve_free_mem(int mem);
int bezier3_solve_checkout(void);
void bezier3_solve_release(int mem);
void bezier3_solve_incref(void);
void bezier3_solve_decref(void);
casadi_int bezier3_solve_n_in(void);
casadi_int bezier3_solve_n_out(void);
casadi_real bezier3_solve_default_in(casadi_int i);
const char* bezier3_solve_name_in(casadi_int i);
const char* bezier3_solve_name_out(casadi_int i);
const casadi_int* bezier3_solve_sparsity_in(casadi_int i);
const casadi_int* bezier3_solve_sparsity_out(casadi_int i);
int bezier3_solve_work(casadi_int* sz_arg, casadi_int* sz_res, casadi_int* sz_iw, casadi_int* sz_w);
int bezier3_solve_work_bytes(casadi_int* sz_arg, casadi_int* sz_res, casadi_int* sz_iw, casadi_int* sz_w);
#define bezier3_solve_SZ_ARG 3
#define bezier3_solve_SZ_RES 1
#define bezier3_solve_SZ_IW 0
#define bezier3_solve_SZ_W 7
int bezier3_traj(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem);
int bezier3_traj_alloc_mem(void);
int bezier3_traj_init_mem(int mem);
void bezier3_traj_free_mem(int mem);
int bezier3_traj_checkout(void);
void bezier3_traj_release(int mem);
void bezier3_traj_incref(void);
void bezier3_traj_decref(void);
casadi_int bezier3_traj_n_in(void);
casadi_int bezier3_traj_n_out(void);
casadi_real bezier3_traj_default_in(casadi_int i);
const char* bezier3_traj_name_in(casadi_int i);
const char* bezier3_traj_name_out(casadi_int i);
const casadi_int* bezier3_traj_sparsity_in(casadi_int i);
const casadi_int* bezier3_traj_sparsity_out(casadi_int i);
int bezier3_traj_work(casadi_int* sz_arg, casadi_int* sz_res, casadi_int* sz_iw, casadi_int* sz_w);
int bezier3_traj_work_bytes(casadi_int* sz_arg, casadi_int* sz_res, casadi_int* sz_iw, casadi_int* sz_w);
#define bezier3_traj_SZ_ARG 3
#define bezier3_traj_SZ_RES 1
#define bezier3_traj_SZ_IW 0
#define bezier3_traj_SZ_W 12
int dcm_to_quat(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem);
int dcm_to_quat_alloc_mem(void);
int dcm_to_quat_init_mem(int mem);
void dcm_to_quat_free_mem(int mem);
int dcm_to_quat_checkout(void);
void dcm_to_quat_release(int mem);
void dcm_to_quat_incref(void);
void dcm_to_quat_decref(void);
casadi_int dcm_to_quat_n_in(void);
casadi_int dcm_to_quat_n_out(void);
casadi_real dcm_to_quat_default_in(casadi_int i);
const char* dcm_to_quat_name_in(casadi_int i);
const char* dcm_to_quat_name_out(casadi_int i);
const casadi_int* dcm_to_quat_sparsity_in(casadi_int i);
const casadi_int* dcm_to_quat_sparsity_out(casadi_int i);
int dcm_to_quat_work(casadi_int* sz_arg, casadi_int* sz_res, casadi_int* sz_iw, casadi_int* sz_w);
int dcm_to_quat_work_bytes(casadi_int* sz_arg, casadi_int* sz_res, casadi_int* sz_iw, casadi_int* sz_w);
#define dcm_to_quat_SZ_ARG 1
#define dcm_to_quat_SZ_RES 1
#define dcm_to_quat_SZ_IW 0
#define dcm_to_quat_SZ_W 25
int f_ref(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem);
int f_ref_alloc_mem(void);
int f_ref_init_mem(int mem);
void f_ref_free_mem(int mem);
int f_ref_checkout(void);
void f_ref_release(int mem);
void f_ref_incref(void);
void f_ref_decref(void);
casadi_int f_ref_n_in(void);
casadi_int f_ref_n_out(void);
casadi_real f_ref_default_in(casadi_int i);
const char* f_ref_name_in(casadi_int i);
const char* f_ref_name_out(casadi_int i);
const casadi_int* f_ref_sparsity_in(casadi_int i);
const casadi_int* f_ref_sparsity_out(casadi_int i);
int f_ref_work(casadi_int* sz_arg, casadi_int* sz_res, casadi_int* sz_iw, casadi_int* sz_w);
int f_ref_work_bytes(casadi_int* sz_arg, casadi_int* sz_res, casadi_int* sz_iw, casadi_int* sz_w);
#define f_ref_SZ_ARG 7
#define f_ref_SZ_RES 6
#define f_ref_SZ_IW 0
#define f_ref_SZ_W 33
int bezier_multirotor(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem);
int bezier_multirotor_alloc_mem(void);
int bezier_multirotor_init_mem(int mem);
void bezier_multirotor_free_mem(int mem);
int bezier_multirotor_checkout(void);
void bezier_multirotor_release(int mem);
void bezier_multirotor_incref(void);
void bezier_multirotor_decref(void);
casadi_int bezier_multirotor_n_in(void);
casadi_int bezier_multirotor_n_out(void);
casadi_real bezier_multirotor_default_in(casadi_int i);
const char* bezier_multirotor_name_in(casadi_int i);
const char* bezier_multirotor_name_out(casadi_int i);
const casadi_int* bezier_multirotor_sparsity_in(casadi_int i);
const casadi_int* bezier_multirotor_sparsity_out(casadi_int i);
int bezier_multirotor_work(casadi_int* sz_arg, casadi_int* sz_res, casadi_int* sz_iw, casadi_int* sz_w);
int bezier_multirotor_work_bytes(casadi_int* sz_arg, casadi_int* sz_res, casadi_int* sz_iw, casadi_int* sz_w);
#define bezier_multirotor_SZ_ARG 6
#define bezier_multirotor_SZ_RES 10
#define bezier_multirotor_SZ_IW 0
#define bezier_multirotor_SZ_W 36
#ifdef __cplusplus
} /* extern "C" */
#endif
